sudo: false
language: c
matrix:
  include:
    - os: linux
      env:
        - MODE=versiondb
        - VERSIONDB_PUSH=true
    - os: linux
      env:
        - MODE=versiondb
        - VERSIONDB_PUSH=false
    - os: linux
      env: MODE=deploy
    - os: linux
      env: MODE=deploy-bleed
    - os: linux
      env:
        - MODE=deploy
        - EUPS_GITREV=b9a7664aee338363b104738b893eb05a6e5c465c
    - os: osx
      env: MODE=deploy
    - os: osx
      env: MODE=deploy-bleed
    - os: linux
      env: MODE=deploy3
    - os: linux
      env: MODE=deploy3-bleed
    - os: osx
      env: MODE=deploy3
    - os: osx
      env: MODE=deploy3-bleed
  # osx builds are often very slow to start due to high demand
  fast_finish: true
  allow_failures:
    - os: osx
script: |
  set -e
  export SHELLOPTS

  expect() {
    local title="$1"
    local is="$2"
    local should="$3"

    echo -e "$title"

    if [[ "$is" != "$should" ]]; then
       echo -e "    expected(${should})"
       echo -e "    got(${is})"
       exit 1
    fi
  }

  case $MODE in
    deploy*)
      # print git version
      git --version
      CONDA_PREFIX="2"
      if [[ $MODE == deploy-bleed ]]; then
        echo -e "*** testing with BLEED Python 2 conda/pip packages ***\n"
        ./bin/deploy -b
      elif [[ $MODE == deploy3-bleed ]]; then
        echo -e "*** testing with BLEED Python 3 conda/pip packages ***\n"
        CONDA_PREFIX="3"
        ./bin/deploy -b -3
      elif [[ $MODE == deploy ]]; then
        echo -e "*** testing with PINNED Python 2 conda/pip packages ***\n"
        ./bin/deploy
      elif [[ $MODE == deploy3 ]]; then
        echo -e "*** testing with PINNED Python 3 conda/pip packages ***\n"
        CONDA_PREFIX="3"
        ./bin/deploy -3
      else
        echo -e "*** Unrecognized mode for deploy script ***\n"
        exit -1
      fi
      . ./bin/setup.sh
      case $(uname -s) in
        Linux*)
          conda_packages="conda${CONDA_PREFIX}_packages-linux-64.txt"
          ;;
        Darwin*)
          conda_packages="conda${CONDA_PREFIX}_packages-osx-64.txt"
          ;;
        *)
          echo "unsupported platform $(uname -s)"
          exit 1
          ;;
      esac
      echo -e "*** checking installed vs ${conda_packages} conda packages ***\n"
      conda list -e > "./etc/${conda_packages}"
      git diff
      rebuild cfitsio
      ;;
    versiondb*)
      echo -e "*** testing VERSIONDB_PUSH=$VERSIONDB_PUSH for versiondb ***\n"
      export VERSIONDB_PUSH
      export VERSIONDB_REPO=./versiondb-test
      mkdir -p $VERSIONDB_REPO
      (cd $VERSIONDB_REPO; git init --bare)
      # pull will fail unless there is a master ref to actually pull; so we
      # make one
      (
        tmpdir=$(mktemp -u -t 'versiondb.XXXXXXXX')
        trap "{ rm -rf $tmpdir; }" EXIT

        mkdir -p "$tmpdir"
        git clone "$VERSIONDB_REPO" "$tmpdir"
        cd $tmpdir
        # it appears that with some versions of git, --author doesn't bypass
        # the user.email/user.name check.
        git config --local user.email 'author@example.com'
        git config --local user.name 'A U Thor'
        git commit --allow-empty -m 'initial commit' --author='A U Thor <author@example.com>'
        git push origin master
      )

      ./bin/deploy

      mkdir -p versiondb/{dep_db,ver_db,manifests}

      . ./bin/setup.sh
      rebuild cfitsio

      cd $VERSIONDB_REPO
      if [[ $VERSIONDB_PUSH == true ]]; then
        echo 'should have master ref'
        git show-ref --heads | grep -q refs/heads/master

        revs=($(git rev-list master))

        # the first commit is the garbage empty commit in order to create the
        # master ref
        expect 'should have two commits'\
          ${#revs[@]} \
          2

        expect 'should have author name' \
          "$(git log --format=%an ${revs[0]}^\!)" \
          'LSST DATA Management'

        expect 'should have author email' \
          "$(git log --format=%ae ${revs[0]}^\!)" \
          'dm-devel@lists.lsst.org'

        expect 'should have subject line' \
          "$(git log --format=%s ${revs[0]}^\!)" \
          'Updates for build b1.'
      else
        echo 'should have master ref'
        git show-ref --heads | grep -q refs/heads/master

        revs=($(git rev-list master))
        expect 'should have one commit' \
          ${#revs[@]} \
          1
      fi
      ;;
    *)
      echo "unknown MODE: $MODE"
      exit 1
      ;;
  esac
notifications:
  email: false
  hipchat:
    rooms:
      secure: hiu+I6yS6iQBguNNyuJ2H6HCUi2575zGgA74vuGIIViFPPF2Oc1Ty18u4ahygglaOzXh9FgFP0XEYhKE1FYPmeneP0bI/u9sr4ruEOUnC1xUyv1ClmsakzNZucQ2N7oeEEY0FOZK2VpQw44cisVdtVQFnTqf99Hj2fGP1+2LIWo=
    template:
      - '%{repository}#%{build_number} (%{branch} - %{commit} : %{author}): %{message} (<a href="%{build_url}">Details</a>/<a href="%{compare_url}">Change view</a>)'
    format: html
