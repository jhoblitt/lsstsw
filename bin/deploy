#!/bin/bash
#
#  Deploy a standardized, standalone, lsst-build sandbox
#

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck source=../etc/settings.cfg.sh
source "${SCRIPT_DIR}/../etc/settings.cfg.sh"

EUPS_VERSION=${EUPS_VERSION:-2.1.3}         # Version of EUPS to install
EUPS_GITREV=${EUPS_GITREV:-""}
EUPS_GITREPO=${EUPS_GITREPO:-"https://github.com/RobertLuptonTheGood/eups.git"}
MINICONDA2_VERSION=${MINICONDA2_VERSION:-4.2.12} # Version of Miniconda to install
MINICONDA3_VERSION=${MINICONDA3_VERSION:-4.2.12} # Version of Miniconda to install
MINICONDA_BASE_URL=${MINICONDA_BASE_URL:-https://repo.continuum.io/miniconda}
CONDA_CHANNELS=${CONDA_CHANNELS:-""}
GIT_VERSION=${GIT_VERSION:-2.2.2}           # Version of git to install
LFS_VERSION=${LFS_VERSION:-1.5.5}           # Version of git-lfs to install

set -e

print_error() {
  >&2 echo -e "$@"
}

fail() {
  local code=${2:-1}
  [[ -n $1 ]] && print_error "$1"
  # shellcheck disable=SC2086
  exit $code
}

usage() {
  if [[ ! -z "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  fail "$(cat <<-EOF

		Usage: $0 [-3] [-b] [-h]"

		Specific options:
		    -b          use bleeding edge conda packages"
		    -3          use Python 3"
		    -h          show this message"

		EOF
  )"
}

config_curl() {
  # Prefer system curl; user-installed ones sometimes behave oddly
  if [[ -x /usr/bin/curl ]]; then
    CURL=${CURL:-/usr/bin/curl}
  else
    CURL=${CURL:-curl}
  fi

  # disable curl progress meter unless running under a tty -- this is intended to
  # reduce the amount of console output when running under CI
  CURL_OPTS='-#'
  if [[ ! -t 1 ]]; then
    CURL_OPTS='-sS'
  fi
}

# We are intentionally not using gnu `getopt` due to portability concerns.
# Sadly, this means no long options without a massive amount of boilerplate.
while getopts "3bh" option; do
  case "$option" in
  b)
    BLEED_DEPLOY=true
    ;;
  3)
    USE_PYTHON3=true
    ;;
  h)
    usage
    ;;
  *)
    usage "Unknown option: ${option}"
    ;;
  esac
done
shift $((OPTIND-1))

mkdir -p "${LSSTSW}"/{sources,build,var/run,var/log,lfs,distserver/production}

export PATH="${LSSTSW}/lfs/bin:${PATH}"
export PATH="${LSSTSW}/bin:${PATH}"

if [[ $USE_PYTHON3 == true ]]; then
  PYVER_PREFIX=3
  MINICONDA_VERSION=$MINICONDA3_VERSION
else
  PYVER_PREFIX=2
  MINICONDA_VERSION=$MINICONDA2_VERSION
fi

case $(uname -s) in
  Linux*)
    ANA_PLATFORM="Linux-x86_64"
    CONDA_PACKAGES="conda${PYVER_PREFIX}_packages-linux-64.txt"
    ;;
  Darwin*)
    ANA_PLATFORM="MacOSX-x86_64"
    CONDA_PACKAGES="conda${PYVER_PREFIX}_packages-osx-64.txt"
    ;;
  *)
    fail "Cannot install miniconda: unsupported platform $(uname -s)"
    ;;
esac

cd "$LSSTSW"

test -f "${LSSTSW}/miniconda/.deployed" || ( # Anaconda
  cd sources

  miniconda_file_name="Miniconda${PYVER_PREFIX}-${MINICONDA_VERSION}-${ANA_PLATFORM}.sh"
  echo "::: Deploying Miniconda${PYVER_PREFIX} ${MINICONDA_VERSION} for ${ANA_PLATFORM}"
  curl -# -L -O "${MINICONDA_BASE_URL}/${miniconda_file_name}"
  bash "$miniconda_file_name" -b -p "${LSSTSW}/miniconda"

  touch "${LSSTSW}/miniconda/.deployed"
)

(
  # configure alt conda channel(s)
  if [[ -n $CONDA_CHANNELS ]]; then
    # shellcheck disable=SC2030
    export PATH="$LSSTSW/miniconda/bin:$PATH"

    # remove any previously configured non-default channels
    # XXX allowed to fail
    set +e
    conda config --remove-key channels
    set -e

    for c in $CONDA_CHANNELS; do
      conda config --add channels "$c"
    done

    # remove the default channels
    conda config --remove channels defaults

    conda config --show
  fi
)

test -f "${LSSTSW}/miniconda/.packages.deployed" || ( # conda packages
  # Install packages on which the stack is known to depend

  # XXX note that
  # https://github.com/lsst/miniconda2/blob/master/ups/eupspkg.cfg.sh
  # uses the conda package specification from this repo.
  # shellcheck disable=SC2031
  export PATH="$LSSTSW/miniconda/bin:$PATH"

  # conda may leave behind lock files from an uncompleted package
  # installation attempt.  These need to be cleaned up before [re]attempting
  # to install packages.
  conda clean --lock

  ARGS=()
  ARGS+=("install" "--yes")

  # disable the conda install progress bar when not attached to a tty. Eg.,
  # when running under CI
  if [[ ! -t 0 ]]; then
    ARGS+=("-q")
  fi

  if [[ $BLEED_DEPLOY == true ]]; then
    PACKAGES=()
    # lsst_distrib / lsst_sims deps
    PACKAGES+=(numpy scipy matplotlib requests cython sqlalchemy astropy pandas numexpr bottleneck)

    # lsst_build deps
    PACKAGES+=(future pyyaml)

    # The conda Intel MKL linked packages are intentionally avoided [on
    # linux].
    # See: https://jira.lsstcorp.org/browse/DM-5105
    if [[ $(uname -s) == Linux* ]]; then
      PACKAGES+=("nomkl")
    fi

    # filter duplicate packages
    PACKAGES=($(echo "${PACKAGES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
    ARGS+=("${PACKAGES[@]}")
  else
    ARGS+=("--file" "${SCRIPT_DIR}/../etc/${CONDA_PACKAGES}")
  fi

  conda "${ARGS[@]}"

  touch "${LSSTSW}/miniconda/.packages.deployed"
)

test -f "${LSSTSW}/lfs/.git.deployed" || ( # git
  if hash git 2>/dev/null; then
    GITVERNUM=$(git --version | cut -d\  -f 3)
    # shellcheck disable=SC2183 disable=SC2046
    GITVER=$(printf "%02d-%02d-%02d\n" $(echo "$GITVERNUM" | cut -d. -f1-3 | tr . ' '))
  fi

  if [[ $GITVER < "01-09-00" ]]; then
    echo "::: Deploying git"
    cd sources
    GIT_BASE_URL="https://www.kernel.org/pub/software/scm/git"
    curl -# -L -O "${GIT_BASE_URL}/git-${GIT_VERSION}.tar.gz"
    curl -# -L -O "${GIT_BASE_URL}/git-manpages-${GIT_VERSION}.tar.gz"
    tar xzf "git-${GIT_VERSION}.tar.gz"
    cd "git-${GIT_VERSION}"
    ./configure --prefix="${LSSTSW}/lfs"
    make -j4
    make install
    cd "${LSSTSW}/lfs/share/man"
    tar xzf "${LSSTSW}/sources/git-manpages-${GIT_VERSION}.tar.gz"
    (cd "$LSSTSW" && git config push.default current)
  else
    echo "::: Using installed git"
  fi
  touch "${LSSTSW}/lfs/.git.deployed"
)

test -f "${LSSTSW}/lfs/.git-lfs.deployed" || (
  echo "::: Deploying git-lfs"

  case $(uname -s) in
    Linux*)  lfs_platform="linux-amd64" ;;
    Darwin*) lfs_platform="darwin-amd64" ;;
    *)
      fail "Cannot install git-lfs: unsupported platform $(uname -s)"
      ;;
  esac

  cd sources
  LFS_BASE_URL="https://github.com/github/git-lfs/releases/download"
  LFS_ARCHIVE="git-lfs-${lfs_platform}-${LFS_VERSION}.tar.gz"
  curl -# -L -O "${LFS_BASE_URL}/v${LFS_VERSION}/${LFS_ARCHIVE}"
  tar xzf "$LFS_ARCHIVE"
  mkdir -p "${LSSTSW}/lfs/bin"
  cp "git-lfs-${LFS_VERSION}/git-lfs" "${LSSTSW}/lfs/bin/"
  cd "$LSSTSW"
  touch "${LSSTSW}/lfs/.git-lfs.deployed"
)

# backwards compatibility if EUPS wasn't installed to a versioned directory
test -f "${LSSTSW}/eups/.deployed" && ( # EUPS
  echo "::: Moving old EUPS to eups/legacy"
  mv "${LSSTSW}/eups" "${LSSTSW}/eups-tmp"
  mkdir -p "${LSSTSW}/eups"
  mv "${LSSTSW}/eups-tmp" "${LSSTSW}/eups/legacy"
  ln -s legacy "${LSSTSW}/eups/current"
)

# if a EUPS_GITREV is set, use that as the version dir name
if [[ -n $EUPS_GITREV ]]; then
  EUPS_VERSION=$EUPS_GITREV
fi

test -f "${LSSTSW}/eups/${EUPS_VERSION}/.deployed" || ( # EUPS
  echo "::: Deploying eups ${EUPS_VERSION}"
  if [[ -e "${LSSTSW}/eups/${EUPS_VERSION}" ]]; then
    chmod -R +w "${LSSTSW}/eups/${EUPS_VERSION}"
    rm -rf "${LSSTSW}/eups/${EUPS_VERSION}"
  fi

  cd sources
  if [[ -n $EUPS_GITREV ]]; then
    git clone "$EUPS_GITREPO" eups
    cd eups
    git checkout "$EUPS_GITREV"
  else
    curl -# -L -o "eups-${EUPS_VERSION}.tar.gz" "https://github.com/RobertLuptonTheGood/eups/archive/${EUPS_VERSION}.tar.gz"
    tar xzf "eups-${EUPS_VERSION}.tar.gz"
    cd "eups-${EUPS_VERSION}"
  fi

  ./configure --prefix="${LSSTSW}/eups/${EUPS_VERSION}" --with-python="${LSSTSW}/miniconda/bin/python" --with-eups="${LSSTSW}/stack"
  make
  make install
  touch "${LSSTSW}/eups/${EUPS_VERSION}/.deployed"
)

if [[ "$(readlink "${LSSTSW}/eups/current")" != "$EUPS_VERSION" ]]; then
  echo "::: Making eups ${EUPS_VERSION} the default"
  rm -f "${LSSTSW}/eups/current"
  ln -s "${EUPS_VERSION}" "${LSSTSW}/eups/current"
fi

test -f "${LSSTSW}/stack/.deployed" || ( # Adjust the stack config
  echo "::: Deploying manifest.remap"
  cd stack/site
  ln -sf ../../etc/manifest.remap
  touch "${LSSTSW}/stack/.deployed"
)

test -f "${LSSTSW}/versiondb/.deployed" || ( # Clone the version database
  echo "::: Deploying versiondb"
  rm -rf versiondb
  git clone "$VERSIONDB_REPO" versiondb

  git config -f versiondb/.git/config user.name "LSST DATA Management"
  git config -f versiondb/.git/config user.email "dm-devel@lists.lsst.org"
  git config -f versiondb/.git/config push.default current
  touch "${LSSTSW}/versiondb/.deployed"
)

test -f "${LSSTSW}/lsst_build/.deployed" || ( # Clone lsst_build
  echo "::: Deploying lsst_build"
  rm -rf lsst_build
  git clone https://github.com/lsst/lsst_build.git
  (cd lsst_build && git config push.default current)
  touch "${LSSTSW}/lsst_build/.deployed"
)

echo "Done. Run the following:"
echo

if [[ $SHELL =~ bash$ ]]; then
  echo "    . ${LSSTSW}/bin/setup.sh"
elif [[ $SHELL =~ csh$ ]]; then # Supports tcsh
  echo "    . ${LSSTSW}/bin/setup.csh"
elif [[ $SHELL =~ zsh$ ]]; then
  echo "    . ${LSSTSW}/bin/setup.sh"
else
  echo "    The setup script in ${LSSTSW}/bin most appropriate for ${SHELL}"
  echo "    (Warning: ${SHELL} is an unsupported shell)"
fi

echo
echo "to begin using it."

# vim: tabstop=2 shiftwidth=2 expandtab
